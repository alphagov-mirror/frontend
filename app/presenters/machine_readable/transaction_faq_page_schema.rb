class MachineReadable::TransactionFaqPageSchema
  attr_reader :transaction

  # Only relevant for /register-to-vote at present
  CONTENT_IN_SCOPE = %w(
    834a7921-260b-4061-9de1-edda3e998c68
  ).freeze

  def self.build(transaction)
    if CONTENT_IN_SCOPE.include?(transaction.content_id)
      new(transaction)
    end
  end

  def initialize(transaction)
    @transaction = transaction
  end

  def structured_data
    {
      "@context" => "http://schema.org",
      "@type" => "FAQPage",
      "headline" => transaction.title,
      "datePublished" => transaction.first_published_at,
      "dateModified" => transaction.updated_at,
      "description" => transaction.description,
      "publisher" => {
        "@type" => "Organization",
        "name" => "GOV.UK",
        "url" => "https://www.gov.uk",
        "logo" => {
          "@type" => "ImageObject",
          "url" => logo_url,
        },
      },
    }
    .merge(main_entity)
  end

private

  def main_entity
    {
      "mainEntity" => questions_and_answers_markup,
    }
  end

  def questions_and_answers_markup
    question_and_answers(page_body)
      .select { |_, value| value[:answer].present? }
      .map do |question, value|
      q_and_a_url = section_url(value[:anchor])

      {
        "@type" => "Question",
        "name" => question,
        "url" => q_and_a_url,
        "acceptedAnswer" => {
          "@type" => "Answer",
          "url" => q_and_a_url,
          "text" => value[:answer],
        },
      }
    end
  end

  # Generates a hash of questions and associated information:
  # - question: the text in the h2 tag preceding other markup. Questions are
  #             used to key the hash. We're skipping any content before the
  #             first h2
  #
  # - :answer: the markup that is not an h2 tag. It is associated with the
  #            preceding h2 header.
  #
  # - :anchor: the id of the h2 (autogenerated by the markdown converter).
  #            This is used to build links directly to the section in question
  def question_and_answers(html)
    doc = Nokogiri::HTML(html)

    question = nil

    doc.xpath("html/body").children.each_with_object({}) do |element, q_and_as|
      if question_element?(element)
        question = element.text
        q_and_as[question] = { anchor: element["id"] }
      elsif question
        if answer_is_unset?(q_and_as, question)
          q_and_as[question][:answer] = element.to_s
        else
          q_and_as[question][:answer] << element.to_s
        end
      end
    end
  end

  def answer_is_unset?(q_and_as, question)
    !q_and_as[question].has_key?(:answer)
  end

  # we use H2 tags as the "question" and the html between them as the "answer"
  QUESTION_TAG = "h2".freeze

  def question_element?(element)
    element.name == QUESTION_TAG
  end

  def section_url(anchor)
    return page_url + "#" + anchor if anchor.present?

    page_url
  end

  def page_url
    Plek.new.website_root + transaction.base_path
  end

  # Because transaction pages are constructed from bits of the content item
  # we have to do something similar for the schema content to make sense.
  def page_body
    transaction.introductory_paragraph +
      "<p><a href='#{transaction.transaction_start_link}'>" +
      "#{transaction.start_button_text}</a></p>" +
      more_information +
      what_you_need_to_know +
      other_ways_to_apply
  end

  def more_information
    return "" unless transaction.more_information

    "<h2 id='more-information'>#{I18n.t('formats.transaction.more_information')}</h2>" +
      transaction.more_information
  end

  def what_you_need_to_know
    return "" unless transaction.what_you_need_to_know

    "<h2 id='what-you-need-to-know'>#{I18n.t('formats.transaction.what_you_need_to_know')}</h2>" +
      transaction.what_you_need_to_know
  end

  def other_ways_to_apply
    return "" unless transaction.other_ways_to_apply

    "<h2 id='other-ways-to-apply'>#{I18n.t('formats.transaction.other_ways_to_apply')}</h2>" +
      transaction.other_ways_to_apply
  end

  def logo_url
    image_url("govuk_publishing_components/govuk-logo.png")
  end

  def image_url(image_file)
    ActionController::Base.helpers.asset_url(image_file, type: :image)
  end
end
